[user]
	email = jon.d.cam@gmail.com
	name  = Jonathan Camilleri

[core]
	editor = nvim

[alias]
	clean-branches = "!f() {                                             \n\
		git fetch --prune                                            \n\
		git checkout origin/HEAD                                     \n\
		git branch --merged |                                        \n\
			grep -v '*' |                                        \n\
			xargs git branch -d;                                 \n\
	}; f; unset f"

	select-branch = "!f() {                                              \n\
		echo $(git branch | grep -v '*' | fzf);                      \n\
	}; f; unset f"

	change-branch = "!f() {                                              \n\
		local selected_branch=$(git select-branch)                   \n\
		[[ -z $selected_branch ]] &&                                 \n\
			echo 'Invalid branch selected, aborting.' && return; \n\
		git checkout ${selected_branch};                             \n\
	}; f; unset f"

	select-commit = "!f() {                                              \n\
		local first=$(git first-branch-commit);                      \n\
		local commit=$(git log ${first}~..HEAD --oneline | fzf);     \n\
		echo ${commit} | cut -d ' ' -f 1;                            \n\
	}; f; unset f"

	commit-fuzzyfixup = "!f() {                                          \n\
		local selected_commit=$(git select-commit)                   \n\
		[[ -z $selected_commit ]] &&                                 \n\
			echo 'Invalid commit selected, aborting.' && return; \n\
		git commit --fixup=${selected_commit}                        \n\
	}; f; unset f"

	rebase-select-branch = "!f() {                                       \n\
		local selected_branch=$(git select-branch)                   \n\
		[[ -z $selected_branch ]] &&                                 \n\
			echo 'Invalid branch selected, aborting.' && return; \n\
		git rebase --interactive --autostash ${selected_branch};     \n\
	}; f; unset f"

	first-branch-commit = "!f() {                                        \n\
		local branch=$(git branch | grep '*' | cut -d ' ' -f 2)      \n\
		local others=$(git branch | grep -v '*')                     \n\
		local commits=$(git rev-list ${branch} --not ${others})      \n\
		echo \"${commits}\" | tail -n 1                              \n\
	}; f; unset f"

	rebase-squash = "!f() {                                              \n\
		local commit=$(git first-branch-commit)                      \n\
		[[ -z $commit ]] &&                                          \n\
			echo 'Invalid commit returned, aborting.' &&         \n\
			return;                                              \n\
		git rebase --interactive --autostash --autosquash $commit~   \n\
	}; f; unset f"

	template-function = "!f() {                                          \n\
		echo \"lines go here\"                                       \n\
	}; f; unset f"

	a    = add
	ap   = add --patch
	b    = branch
	c    = commit
	ca   = commit --amend
	capp = commit --amend --no-edit
	cb   = change-branch
	cf   = commit-fuzzyfixup
	co   = checkout
	d    = diff
	da   = diff --staged
	das  = diff --staged --stat
	db   = diff origin...HEAD
	dc   = diff HEAD~ HEAD
	ds   = diff --stat
	l    = log
	ll   = log origin..HEAD --oneline
	pcb  = push origin HEAD
	r    = reset
	rb   = rebase
	rbb  = rebase-select-branch
	rbc  = rebase --continue
	rbs  = rebase-squash
	rc   = reset --soft HEAD~
	s    = status
	st   = stash
	stc  = stash show --patch
	std  = stash drop

